security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        oauth:
            id: new_living_user.oauth_user_provider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            custom_authenticators:
                - App\Security\Infrastructure\Google\GoogleAuthenticator
            logout:
                path: logout

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/connect/google, roles: PUBLIC_ACCESS }
        - { path: ^/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/doc.json, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        providers:
            test_users:
                memory:
                    users:
                        admin: { password: 'admin123', roles: [ 'ROLE_ADMIN' ] }
                        user: { password: 'user123', roles: [ 'ROLE_USER' ] }

        firewalls:
            main:
                custom_authenticators: [ ]
                provider: test_users
                logout:
                    path: logout

        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
